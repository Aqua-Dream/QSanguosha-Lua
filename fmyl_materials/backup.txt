
-- 懂王: 出牌阶段，你可以将一些牌置于武将牌上，称为“懂”。<b>锁定技</b> 其他角色不能使用或打出与“懂”同名的手牌。
-- 口胡:<b>锁定技</b> 你每受到一点伤害，需将一张“懂”收回手牌。其他角色的回合开始前，需抽取你的一张“懂”并将其置入弃牌堆。

dongwangMod = sgs.CreateTriggerSkill{
    name = "#dongwangMod",  
    events = {sgs.CardsMoveOneTime,sgs.EventLoseSkill}, 
    frequency = sgs.Skill_Compulsory,
    on_trigger = function(self, event, player, data)
        local room = player:getRoom()
        if event == sgs.CardsMoveOneTime then
            local move = data:toMoveOneTime()
            if move and move.to_place == sgs.Player_PlaceSpecial and move.to_pile_name == "dong" then
                for _, p in sgs.qlist(room:getAlivePlayers()) do
                    if move.to:objectName() == p:objectName() then
                        player = p
                        break
                    end
                end 
                for _, p in sgs.qlist(room:getOtherPlayers(player)) do
                    for _,id in sgs.qlist(move.card_ids) do
                        local cd = sgs.Sanguosha:getCard(id)
                        local name = cd:getClassName()
                        room:setPlayerCardLimitation(p, "use,response", name.."|.|.|hand", false)
                    end
                end
            elseif move and move.from_pile_names then
                local i = 0
                for _,id in sgs.qlist(move.card_ids) do
                    local cd = sgs.Sanguosha:getCard(id)
                    local name = cd:getClassName()
                    i = i + 1
                    if move.from_pile_names[i] == "dong" then
                        for _, p in sgs.qlist(room:getAlivePlayers()) do
                            if not p:hasSkill("dongwang") then
                                room:removePlayerCardLimitation(p, "use,response", name.."|.|.|hand")
                            end
                        end
                    end
                end
            end
        elseif data:toString() == "dongwang" or data:toString() == self:objectName() then -- Lose Skill
            player:clearOnePrivatePile("dong")
        end
    end
}

dongwangCard = sgs.CreateSkillCard{
    name = "dongwang" ,
    will_throw = false ,
    target_fixed = true ,
    on_use = function(self, room, source, targets)
        source:addToPile("dong", self, true)
    end
}

dongwang = sgs.CreateViewAsSkill{
    name = "dongwang",
    n = 999,
    view_filter = function(self, selected, to_select)
        return true
    end,
    view_as = function(self, cards)
        if #cards > 0 then
            local dongwang_card = dongwangCard:clone()
            for _,card in pairs(cards) do
                dongwang_card:addSubcard(card)
            end
            return dongwang_card
        end
    end
}

extension:insertRelatedSkills("dongwang","#dongwangMod") 



kouhu = sgs.CreateTriggerSkill{
    name = "kouhu",  
    events = {sgs.Damaged, sgs.EventPhaseStart}, 
    view_as_skill = kouhuVS,
    can_trigger = function(self, player)
        return player and player:isAlive()
    end,
    on_trigger = function(self, event, player, data)
        local room = player:getRoom()
        local tlp = room:findPlayerBySkillName(self:objectName())
        if not tlp or tlp:getPile("dong"):isEmpty() then 
            return false 
        end
        local room = player:getRoom()
        if event == sgs.Damaged then
            local damage = data:toDamage()
            if damage.to and damage.to:hasSkill(self:objectName()) then
                local card_ids = tlp:getPile("dong")
                local dummy = sgs.Sanguosha:cloneCard("slash", sgs.Card_NoSuit, 0)
                if damage.damage >= card_ids:length() then
                    dummy.addSubcards(card_ids)
                else
                    room:fillAG(card_ids)
                    for i=1,damage.damage do
                        local card_id = room:askForAG(tlp, card_ids, false, "kouhu")
                        room:takeAG(tlp, card_id, false)
                        dummy:addSubcard(card_id)
                        card_ids:removeOne(card_id)
                    end
                    room:clearAG()
                end
                tlp:obtainCard(dummy)
                dummy:deleteLater()
            end
        elseif  player:getPhase() == sgs.Player_Start and not player:hasSkill(self:objectName()) then-- Phase start
            local card_ids = tlp:getPile("dong")
            local id = card_ids:at(math.random(0, card_ids:length() - 1))--取随机手牌代替askForCardChosen
            local cd = sgs.Sanguosha:getCard(id)
            --room:writeToConsole(cd:getClassName())
            local reason = sgs.CardMoveReason(sgs.CardMoveReason_S_REASON_REMOVE_FROM_PILE, "", "kouhu", "")
            room:throwCard(cd, reason, nil)
        end
        return false
    end
} 

   ["yi"]="易大师",
    ["#yi"]="无极剑圣",
    ["jiandao"]="剑道",
    [":jiandao"]="锁定技。你每使用或打出一张基本牌或锦囊牌时，获得一个“易”标记；你与其他角色计算相互的距离-X（X为“易”的数量的一半，向下取整）。",
    ["luaLianji"]="连击",
    [":luaLianji"]="锁定技。你每次使用【杀】或除【无懈可击】之外的非延时锦囊结算完后，若你的“易”标记不少于你的体力上限，你弃掉所有标记，然后此牌进行一次额外的合法结算。",
    ["alphatuxi"]="α突袭",
    [":alphatuxi"]="觉醒技。准备阶段开始时，若你计算与所有其他角色距离为1，你失去1点体力上限，然后摸X张牌并弃掉所有“易”标记（X为“易”的数量且至多为2）。",
    ["@yiMark"]="易",

    yi = sgs.General(extension, "yi", "god",4, true) 

jiandao = sgs.CreateTriggerSkill{
    name = "jiandao",
    frequency = sgs.Skill_Compulsory,
    events = {sgs.CardResponded,sgs.CardUsed},
    on_trigger = function(self, event, player, data)
        local room = player:getRoom()
        local mark = "@yiMark"
        local flag = "lianjiFlag"
        local card
        if event==sgs.CardResponded then
            card = data:toCardResponse().m_card
        elseif event==sgs.CardUsed then
            card = data:toCardUse().card
        end
        if card then
            if player:hasFlag(flag) then
                player:setFlags("-"..flag)
            elseif (card:isKindOf("BasicCard") or card:isKindOf("TrickCard")) then
                player:gainMark(mark)
            end
        end
        return false
    end
}
jiandaoDist = sgs.CreateDistanceSkill{
    name = "#jiandaoDist" ,
    correct_func = function(self, from, to)
        return -math.floor((from:getMark("@yiMark")+to:getMark("@yiMark"))/2)
    end
}

extension:insertRelatedSkills("jiandao","#jiandaoDist") 

function canUse(use)
    local card = use.card
    for _, p in sgs.qlist(use.to) do
        if not p:isAlive() or (use.card:isKindOf("Collateral") and not p:getWeapon())
            or ((use.card:isKindOf("Snatch") or use.card:isKindOf("Dismantlement")) and p:getCardCount(true,true)==0)
            or  (use.card:isKindOf("FireAttack") and p:getCardCount(false)==0) then
            use.to:removeOne(p)
        end
    end
    return not use.to:isEmpty()
end

luaLianji = sgs.CreateTriggerSkill{
    name = "luaLianji",
    frequency = sgs.Skill_Compulsory,
    events = {sgs.CardFinished,sgs.SlashEffected},
    on_trigger = function(self, event, player, data)
        local room = player:getRoom()
        local mark = "@yiMark"
        local flag = "lianjiFlag"
        if event == sgs.CardFinished then
            local use = data:toCardUse()
            local card = use.card
            if player:getMark(mark)>=player:getMaxHp() and (card:isKindOf("Slash") or (card:isNDTrick() and not card:isKindOf("Nullification"))) then
                room:getThread():delay()
                room:sendCompulsoryTriggerLog(player, self:objectName())
                player:loseAllMarks(mark)
                player:setFlags(flag)
                if canUse(use) then
                    if use.card:isKindOf("Slash") then
                        player:setFlags("lianjiSlash")
                    end
                    room:useCard(use)
                end
            end
        else
            local effect = data:toSlashEffect()
            if effect.from:hasFlag("lianjiSlash") then
                effect.drank=0
                data:setValue(effect)
                effect.from:setFlags("-lianjiSlash")
            end
        end
        return false
    end,
    can_trigger = function(self, target)
        return target and target:isAlive()
    end
}

function isAllAdjacent(from)
    for _, p in sgs.qlist(from:getAliveSiblings()) do
        if from:distanceTo(p) ~= 1 then
            return false
        end
    end
    return true
end

alphatuxi = sgs.CreateTriggerSkill{
    name = "alphatuxi",
    frequency = sgs.Skill_Wake,
    events = {sgs.EventPhaseStart},
    on_trigger = function(self, event, player, data)
        local room = player:getRoom()
        if player:getPhase()==sgs.Player_Start and player:getMark("yiWake")==0 and isAllAdjacent(player) 
        and room:changeMaxHpForAwakenSkill(player) then
            room:doSuperLightbox(player:objectName(),self:objectName())
            if player:getMark("@yiMark")>0 then
                room:getThread():delay()
                player:drawCards(math.min(player:getMark("@yiMark"), 2))
                player:loseAllMarks("@yiMark")
            end
            room:setPlayerMark(player,"yiWake", 1)
        end
        return false
    end
}

yi:addSkill(jiandao)
yi:addSkill(jiandaoDist)
yi:addSkill(luaLianji)
yi:addSkill(alphatuxi)